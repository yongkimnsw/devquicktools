#!/bin/bash

#text_red=$(tput setaf 1)
#text_green=$(tput setaf 2)
#text_blue=$(tput setaf 4)
text_magenta=$(tput setaf 5)
#text_yellow=$(tput setaf 3)
text_bold=$(tput bold)
#text_rev=$(tput rev)
text_reset=$(tput sgr0)

sed_remove_index() {
    sed -r 's/^[[:space:]]*[0-9]+[[:space:]]+//g'
}

sed_exclude_0_index() {
    sed -r "/^[[:space:]]*0[[:space:]]+/d"
}

smart_pwd() {
    echo "$PWD" | sed -r "s#^$HOME($|/)#~\1#g"
}

smart_pwd_escaped() {
    smart_pwd | sed -r 's/\(/\\(/g;s/\)/\\)/g;'
}

expand_tilde() {
    local var="$1"
    echo "${var/#\~/$HOME}"
}

smart_popd() {
    for i in $(dirs -v | sort -rn -k 1 | sed -rn "s#^[[:space:]]*([1-9]+[0-9]*)[[:space:]]+$(smart_pwd_escaped)\$#\1#p"); do
        popd -n "+$i" >/dev/null
    done
}

sed_pushd() {
    sed -rn 's#(.*)#pushd -n "\1" > /dev/null#p' "$@"
}

smart_history_update() {
    # push current directory
    smart_popd
    pushd -n "$(smart_pwd)" >/dev/null

    # merge memory history into stored history
    (
        dirs -v | sed_remove_index
        cat ~/.dirstack 2>/dev/null
    ) | sort -ur >~/.dirstack.$$
    mv -f ~/.dirstack.$$ ~/.dirstack

    # load stored history
    dirs -c
    # shellcheck source=/dev/null
    source <(sed_pushd ~/.dirstack 2>/dev/null)
}

smart_history_show() {

    echo ""
    echo "${text_bold}##### mc$text_reset"
    dirs_from_mc | sed -r "s#^(${PWD}$)\$#$text_magenta\1*$text_reset#g;"
    echo ""
    echo "${text_bold}###### stack$text_reset"
    dirs -v | sed_exclude_0_index | sed -r 's/^ ([0-9] )/\1  /g;s/^([0-9][0-9] )/\1 /g;' | sed -rn "s#^([[:space:]]*)([1-9]+[0-9]*)([[:space:]]+)(.*)\$#\1\2\3\4 [\2]#p;" | sort -u -k 2 |
        sed -r "s#^([[:space:]]*[0-9]+[[:space:]]+$(smart_pwd_escaped)[[:space:]]+\[[0-9]+\])\$#$text_magenta\1*$text_reset#g;"

    echo ""
}

smart_seq() {
    eval "$(
        sed -rn '
            /^([0-9]+)-([0-9]+)$/ {
                s/^([0-9]+)-([0-9]+)$/seq \1 \2;/p
            }

            /^([0-9]+)$/ {
                s/^([0-9]+)$/echo \1;/p
            }
        '
    )"
}

egrep_pwd() {
    _pwd=$(smart_pwd_escaped)
    grep -E "$@" "^[[:space:]]*[0-9]+[[:space:]]+${_pwd}\$"
}

dirsv_without_0_index() {
    dirs -v | sed_exclude_0_index | egrep_pwd -v
}

dirs_from_mc() {
    sed -rn 's/.*URL "([^"]+)".*/\1/p' ~/.config/mc/hotlist | grep -v "//" | sort -u
}

dirs_from_mc_without_pwd() {
    dirs_from_mc | grep -Ev "^${PWD}$"
}

sed_dir_only() {
    head -n 1 | sed -rn "s#^([[:space:]]*)([1-9]+[0-9]*)([[:space:]]+)(.*)\$#\4#p;"
}

print_parent_dirs() {
    (
        smart_pwd
        while true; do
            if [ "x$PWD" = "x/" ]; then
                break
            fi

            cd .. 2>/dev/null
            smart_pwd
        done
    )
}

smart_cd() {
    # directory in parameter
    local pdir="$(expand_tilde "$1")"
    local sdir

    rm -f ~/bin/wcd.go

    # show history
    if [ "$#" -eq 0 ]; then
        smart_history_show
        return 0

    # delete items in history
    elif [ "x$pdir" = "x!" ]; then
        shift

        rm -f ~/.dirstack*

        if [ "$#" -eq 0 ]; then
            dirs -c
        else
            re='(^[0-9]+$|^[0-9]+-[0-9]+$)'
            for j in "$@"; do

                if [[ "$j" =~ $re ]]; then
                    for i in $(echo "$j" | tr ' ' '\n' | smart_seq | sort -rn); do
                        echo "delete $(dirs "+$i")"
                        popd -n "+$i" >/dev/null
                    done
                else
                    for i in $(dirsv_without_0_index | grep -E "$j" | sed -rn 's/^[[:space:]]*([0-9]+).*/\1/p' | sort -rn); do
                        echo "delete $(dirs "+$i")"
                        popd -n "+$i" >/dev/null
                    done
                fi
            done
        fi

        smart_history_update
        return 0

    # switch to dirname of file
    elif [ -e "$pdir" ] && [ ! -d "$pdir" ]; then
        /usr/bin/wcd.exec -i -q -c "$(dirname "$pdir")" || return $?
    elif [ "x$pdir" = 'x=' ] || [ "x$pdir" = 'x-' ] || [ "x$pdir" = 'x+' ] || [ "x$pdir" = "x.." ] || [ "x$pdir" = "x." ] || (cd "$@" &>/dev/null); then
        /usr/bin/wcd.exec -i -q -c "${pdir}" &>/dev/null || return $?
    else
        sdir=""
        # search for index
        test -n "$sdir" || sdir=$(dirsv_without_0_index | grep -E "^[[:space:]]*$*[[:space:]]+" 2>/dev/null | sed_dir_only)
        # search for parent
        test -n "$sdir" || sdir=$(print_parent_dirs | sort | agrep -B -i "$*[^/]*$" 2>/dev/null | sed_dir_only)
        test -n "$sdir" || sdir=$(print_parent_dirs | sort | agrep -B -i "$*" 2>/dev/null | sed_dir_only)
        # search for mc
        test -n "$sdir" || sdir=$(dirs_from_mc_without_pwd | sort | agrep -B -i "$*[^/]*$" 2>/dev/null | sed_dir_only)
        test -n "$sdir" || sdir=$(dirs_from_mc_without_pwd | sort | agrep -B -i "$*" 2>/dev/null | sed_dir_only)
        # search for history
        test -n "$sdir" || sdir=$(dirsv_without_0_index | agrep -B -i "$*[^/]*$" 2>/dev/null | sed_dir_only)
        test -n "$sdir" || sdir=$(dirsv_without_0_index | agrep -B -i "$*" 2>/dev/null | sed_dir_only)

        if [ -n "$sdir" ]; then
            /usr/bin/wcd.exec -i -q -c "$(expand_tilde "${sdir}")" &>/dev/null || return $?
        else
            grep -q "cd" ~/bin/wcd.go 2>/dev/null || /usr/bin/wcd.exec -i -q -c "$pdir*" &>/dev/null
            grep -q "cd" ~/bin/wcd.go 2>/dev/null || /usr/bin/wcd.exec -i -q -c "*$pdir" &>/dev/null
            # print error
            grep -q "cd" ~/bin/wcd.go 2>/dev/null || {
                /usr/bin/wcd.exec -i -q -c "$pdir"
                return 1
            }
        fi
    fi

    if [ -e ~/bin/wcd.go ]; then
        grep -q "cd" ~/bin/wcd.go || {
            echo "failed to cd to $pdir" >&2
            return 1
        }
        # shellcheck source=/dev/null
        source ~/bin/wcd.go || return $?
    fi

    if [ -t 1 ]; then
        smart_history_update
        echo "$text_magenta== [cd] $(dirs -v | sed_exclude_0_index | egrep_pwd | sed -rn "s#^([[:space:]]*)([1-9]+[0-9]*)([[:space:]]+)(.*)\$#\1\2\3\4 [\2]#p;") ==$text_reset"
    fi

    return $?
}

# bash settings
set -o vi

#######################################################################################################################
# alias
#######################################################################################################################

alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'

alias cb="xsel --clipboard"
alias m='source /usr/lib/mc/mc-wrapper.sh --nomouse'
alias c='smart_cd'
alias c!='smart_cd !'
alias c..='smart_cd ..'

smart_history_update
