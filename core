#!/bin/bash

#text_red=$(tput setaf 1)
#text_green=$(tput setaf 2)
#text_blue=$(tput setaf 4)
text_magenta=$(tput setaf 5)
#text_yellow=$(tput setaf 3)
text_bold=$(tput bold)
#text_rev=$(tput rev)
text_reset=$(tput sgr0)

find_mlocate_db() {
    (
        while [ ! -f "mlocate.db" ]; do
            if [ "x$PWD" = "x/" ]; then
                break
            fi

            cd .. 2>/dev/null
        done

        if [ -f "mlocate.db" ]; then
            echo "$PWD/mlocate.db"
        else
            echo "mlocate.db not found" >&2
        fi
    )
}

xargs_md5sum() {
    xargs -r md5sum 2>/dev/null | sort --parallel=8
}

highlight() {
    ag --passthru "$*"
}

search_mlocate_db() {
    if [ "x$mlocate_db" = "x" ]; then
        echo "mlocate.db not found" >&2
    else
        locate -d "$mlocate_db" "$@"
    fi
}

print_mlocate_info() {
    if [ -t 1 ]; then
        echo "$text_magenta== [find subdirectory] $mlocate_db ==$text_reset"
    fi
}

print_sep() {
    msg="$*"
    echo ""
    printf "$text_bold%-100s$text_reset\n" "${msg:+[ $msg ]}" | sed -r 's/  /==/g;s/= /==/g;'
}

print_mlocate_ignore() {
    sed -r \
        "
                s%#.*%%g;
                /^[[:space:]]*$/d;
                s%^([^/\\.])%$mlocate_dir\\1%g;
                s%^\\./%$mlocate_dir/%g;
                s%/$%%g;
            " \
        "$mlocate_ignore" 2>/dev/null
}

grep_pwd_and_remove() {
    local dir_to_remove="$1"
    grep "^$dir_to_remove/" | sed -ru "s%^$dir_to_remove/(.*)%./\1%g"
}

bail() {
    echo "$*" >&1
    exit 1
}

# search locate database
command_qfind() {

    local pipe_command1="cat"
    local pipe_command2="cat"

    while [ $# -gt 0 ]; do
        case $1 in
            -f)
                shift
                pipe_command1="grep_pwd_and_remove ${PWD}"
                ;;

            -m)
                shift
                pipe_command2="xargs_md5sum"
                ;;

            *)
                break
                ;;
        esac
    done

    local pipe_command3
    if [ "$pipe_command1" = "cat" ]; then
        pipe_command3="cat"
    else
        pipe_command3="grep $*"
    fi

    mlocate_db=$(find_mlocate_db 2>/dev/null)
    search_mlocate_db -r "$*" | $pipe_command1 | $pipe_command3 | $pipe_command2 | highlight "^.*/rootfs|/rootfs|$*"
}

# build locate database
command_qbuildlocale() {
    local mlocate_db
    if [ "$#" -gt 0 ]; then
        mlocate_db="$1/mlocate.db"
    else
        mlocate_db=$(find_mlocate_db)
    fi

    test -n "$mlocate_db" || return 1

    echo "$text_magenta== [start collecting   ] $mlocate_db ==$text_reset"

    mlocate_dir="$(dirname "$mlocate_db")"
    mlocate_ignore="$mlocate_dir/.mlocateignore"

    exclude_options="$(print_mlocate_ignore | sed -rn 's/^(.+)$/-e \1/p')"
    updatedb -l 0 -o "$mlocate_db" -U "$mlocate_dir" ${exclude_options:+"$exclude_options"} && echo "$text_magenta== [finished collecting] $mlocate_db ==$text_reset" >&2
}

command_qpath() {
    local clipboard
    if [ $# -lt 1 ]; then
        clipboard=$(pwd | tr -d '\n')
        echo -n "$clipboard" | xsel --clipboard -i
    else
        clipboard=$(readlink -f "$@" | tr -d '\n')
        echo -n "$clipboard" | xsel --clipboard -i
    fi
    echo "$clipboard"
}

command_qstatus() {
    [ "$#" = 0 ] || cd "$@" || bail "failed to cd $*"
    print_sep "directory"
    echo "directory : $(pwd)"
    if svn info >/dev/null 2>/dev/null; then
        print_sep "SVN info"
        svn info
        print_sep "SVN log"
        svn log -l 3
        print_sep "SVN status"
        svn status
        print_sep ""
    elif git status >/dev/null 2>/dev/null; then
        print_sep "GIT tag"
        git --no-pager tag -l
        print_sep "GIT branch (remote)"
        git --no-pager branch -rv
        print_sep "GIT remote"
        git --no-pager remote -v
        print_sep "GIT log"
        git --no-pager log -n 3
        print_sep "GIT branch (local)"
        git --no-pager branch -v
        print_sep "GIT status"
        git --no-pager status
        print_sep ""
    else
        print_sep ""
        echo "No source control found"
        print_sep ""
    fi
}

command_qag() {
    ag --hidden -U --ignore-dir .git --ignore-dir .svn "$@"
}

command_qgrep() {
    grep -R --exclude-dir=.git --exclude-dir=.svn "$@" 2>/dev/null
}

command_qgiteach() {
    if [ "$#" -gt 0 ]; then

        find . -maxdepth 1 -type d -name '.git' 2>/dev/null | while read -r i; do
            echo "$text_bold========== ${i%/.git}$text_reset"
            git -C "${i%/.git}" "$@"
        done
    else
        echo "git-foreach <git parameters>..." >&2
    fi
}

command_qfd() {
    /bin/fdfind -IHp "$@"
}

kill_children() {
    pkill "$$"
    exit 0
}

command_qrep() {

    trap "kill_children" SIGINT

    while true; do
        echo ""
        echo "=================================== $(date)  =================================== "
        "$@"
    done
}

command_qbuildcscope() {
    basedir="$1"
    test -z "$basedir" && basedir=$(pwd)

    cat_name_files() {
        echo "*.[ch] *.py *.cc *.cpp *.html *.inc *.css *.js *.asp *.dts *.dtsi *.lua *.sh *.lua *.S *.html *.htm *.js Kconfig Makefile" | sed -n '
            /[^[:space:]]\+[[:space:]]\+/ {
                s/\([^[:space:]]*\)[[:space:]]\+/-name "\1" -or /g
            }
            /[^[:space:]]\+$/ {
                s/\([^[:space:]]\+\)$/-name "\1"/g
            }

            p
        '
    }

    find_source() {
        FILES=$(cat_name_files)
        eval "find ! \\( -name .svn -o -name tmp-glibc -o -name html -prune \\) -readable -type f \\( $FILES \\)"
    }

    bail() {
        echo "$*" >&2
        exit 1
    }

    echo "* finding source files to cscope.files"
    find_source | tee cscope.files || bail "failed in finding files"

    echo "* build cscope"
    #cscope -buvq
    cscope -buv
    readlink -f cscope.out
}

command_core() {
    # get dest
    dest="$2"
    if [ "x$dest" = "x" ]; then
        dest=$(pwd)
    fi
    [ -d "$dest" ] || bail "destination not directory"
    dest="${dest%/}"

    rcommand=$(readlink -f "$fcommand")
    dcommand=$(dirname "$rcommand")

    case "$1" in
        install)
            # install core-profile
            echo -e "installing... $dest/core-profile"
            if [ -L "$dest/core-profile" ] || ! [ -e "$dest/core-profile" ]; then
                ln -sf "$dcommand/core-profile" -T "$dest/core-profile"
            else
                bail "failed to install $dest/core-profile"
            fi

            # install core-rc
            echo -e "installing... $dest/core-rc"
            if [ -L "$dest/core-rc" ] || ! [ -e "$dest/core-rc" ]; then
                ln -sf "$dcommand/core-rc" -T "$dest/core-rc"
            else
                bail "failed to install $dest/core-rc"
            fi

            for i in ${command_list//|/ }; do
                echo -e "installing... $dest/$i"
                if [ -L "$dest/$i" ] || ! [ -e "$dest/$i" ]; then
                    ln -sf "$rcommand" -T "$dest/$i"
                else
                    bail "failed to install $dest/$i"
                fi
            done

            echo -e "adding core-profile to zprofile..."
            touch ~/.zprofile ~/.zshrc
            sed -ri '/^[[:space:]]*source[[:space:]]+.*\/core-profile[[:space:]]*$/d' ~/.zprofile
            echo "source $dest/core-profile" >>~/.zprofile

            echo -e "adding core-rc to zshrc..."
            sed -ri '/^[[:space:]]*source[[:space:]]+.*\/core-rc[[:space:]]*$/d' ~/.zshrc
            echo "source $dest/core-rc" >>~/.zshrc
            ;;

        uninstall)
            for i in core-profile core-rc ${command_list//|/ }; do
                echo -e "uninstalling... $dest/$i"
                ! [ -L "$dest/$i" ] || rm "$dest/$i"
            done

            echo -e "removing core-profile from zprofile..."
            touch ~/.zprofile ~/.zshrc
            sed -ri '/^[[:space:]]*source[[:space:]]+.*\/core-profile[[:space:]]*$/d' ~/.zprofile

            echo -e "removing core-rc from profile..."
            sed -ri '/^[[:space:]]*source[[:space:]]+.*\/core-rc[[:space:]]*$/d' ~/.zshrc
            ;;

        help | *)
            print_usage
            ;;
    esac
}

command_qrun() {
    DISPLAY="$DISPLAY" XAUTHORITY=~/.Xauthority exec "$@" &>/dev/null
}

command_qsux() {
    exec sudo DISPLAY="$DISPLAY" XAUTHORITY=~/.Xauthority "$@"
}

command_qowrtmake() {
    # buildopenwrt <openwrt topdir> <package name> <package source dir> <package build dir>
    local openwrt_topdir="$1"
    local openwrt_package="$2"
    local openwrt_src_dir="$3"
    local openwrt_build_dir="$4"

    [ -d "$openwrt_topdir" ] || bail "wrong OpenWRT topdir specified"

    openwrt_topdir_fname="$(readlink -f "$openwrt_topdir")"
    [ -n "$openwrt_src_dir" ] || openwrt_src_dir=$(find "$openwrt_topdir_fname"/feeds -type d -path */${openwrt_package}/src)
    [ -n "$openwrt_build_dir" ] || openwrt_build_dir=$(readlink -f "$openwrt_topdir_fname"/build_dir/target-*/${openwrt_package}-*)

    [ -d "$openwrt_src_dir" ] || bail "cannot find OpenWRT source directroy"
    [ -d "$openwrt_build_dir" ] || bail "cannot find OpenWRT build directroy"

    cat << EOF
* info
TOP DIR   : $openwrt_topdir
SRC DIR   : $openwrt_src_dir
BUILD DIR : $openwrt_build_dir

EOF

openwrt_src_rdir="$(realpath --relative-to=. "$openwrt_src_dir")"

    cat << EOF
* build
CMD: make -C '$openwrt_topdir' 'package/$openwrt_package/compile' V=s
EOF
    make -C "$openwrt_topdir" "package/$openwrt_package/compile" V=s 2>&1 | sed -r \
        "
            s%$openwrt_build_dir%$openwrt_src_rdir%g;
        "
}

command_qowrtclean() {
    local openwrt_topdir="$1"
    local openwrt_package="$2"

    make -C "$openwrt_topdir" "package/$openwrt_package/clean" V=s
}

print_usage() {
    cat <<EOF

devquicktools v1.0 <command> [options]

commnads)

    * locale database
        qbuildlocale [dir]
            build locate database

        qfind[m] <regex> : search locate database for global files and directories
            options)
                m       md5sum
                regex   regular expression to match files or directories

        qlfind[m] <regex> : search locate database for local files and directories
            options)
                m       md5sum
                regex   regular expression to match files or directories

    * path
        qpath [file] : copy the full path of file (or PWD) into clipboard

    * grep and find
        qag   : ag without .svn and .git
        qgrep : grep recurisvely without .svn and .git
        qfd   : fd for all with case ignored

    * version control
        qstatus                : get state of SVN or GIT
        qgiteach <git command> : git for each directory

    * launch
        qrep : repeat command
        qrun : do rn with stdout and stderr redirected to null
        qsux : sudo with xauthority

    * misc.
        qbuildcscope : build cscope

    * build
        qowrtmake <openwrt topdir> <package name> [package source dir] [package build dir]
        qowrtclean <openwrt topdir> <package name>

    * management
        install [target directory] : install quick commands
        uninstall                  : uninstall quick commands
        help                       : print usage help

    * alias
        qmc   : launch mc with no mouse (alias)
        qxsel : copy stdin to clipboard

EOF

}

command_list="core|qsux|qrun|qag|qgrep|qstatus|qbuildlocale|qgiteach|qpath|qfind|qfindm|qlfind|qlfindm|qfd|qbuildcscope|qrep|qowrtmake|qowrtclean"

# parse command
fcommand="$0"
subcommand=$(basename -- "$fcommand")

# parse subcommand
case "$subcommand" in
    qfind)
        command_qfind "$@"
        ;;

    qfindm)
        command_qfind -m "$@"
        ;;

    qlfind)
        command_qfind -f "$@"
        ;;

    qlfindm)
        command_qfind -f -m "$@"
        ;;

    *)
        ! echo "$command_list" | grep -q "\b$subcommand\b" || "command_$subcommand" "$@"
        ;;

esac

exit 0
